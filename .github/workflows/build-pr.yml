name: Build PR installer

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/setup-python@v5
        with:
          python-version: 3.10.16

      - name: Build wheel
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build .

  build-installer:
    needs: build-and-package
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract branch name and commit ID
        run: |
          # Extract branch name, replacing / with - for valid filename
          $BRANCH_NAME = if ($env:GITHUB_HEAD_REF) { $env:GITHUB_HEAD_REF } else { $env:GITHUB_REF -replace '^refs/heads/' }
          $BRANCH_NAME = $BRANCH_NAME -replace '/', '-'
          echo "BRANCH_NAME=$BRANCH_NAME" >> $env:GITHUB_ENV
          
          # Get short commit ID (first 7 characters)
          $COMMIT_ID = git rev-parse --short=7 HEAD
          echo "COMMIT_ID=$COMMIT_ID" >> $env:GITHUB_ENV
          
          Write-Host "Branch name: $BRANCH_NAME"
          Write-Host "Commit ID: $COMMIT_ID"

      - name: Get version number from package.json
        run: |
          $VERSION = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$VERSION" >> $env:GITHUB_ENV
          Write-Host "Version: $VERSION"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate version.txt
        run: |
          python installer/version.py
          if (Test-Path -Path "version.txt") {
            Write-Host "version.txt generated successfully"
            Get-Content -Path "version.txt"
          } else {
            Write-Host "ERROR: version.txt was not generated!"
            exit 1
          }

      - name: Install NSIS
        run: |
          Invoke-WebRequest -UserAgent "Wget" -Uri "https://sourceforge.net/projects/nsis/files/NSIS%203/3.10/nsis-3.10-setup.exe" -OutFile "nsis.exe"
          Start-Process nsis.exe -ArgumentList '/S' -Wait
          echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH

      - name: Build installer
        run: |
          echo "Building installer with NSIS..."
          $SCRIPT_PATH = "$(Get-Location)\installer\Installer-UX.nsi"
          Write-Host "Using NSIS script at: $SCRIPT_PATH"
          
          if (Test-Path -Path $SCRIPT_PATH) {
            makensis $SCRIPT_PATH
          } else {
            Write-Host "ERROR: NSIS script not found at $SCRIPT_PATH"
            exit 1
          }

      - name: Rename installer
        if: success()
        run: |
          if (Test-Path -Path "installer") {
            $INSTALLER_FILES = Get-ChildItem -Path "installer" -Filter "*.exe" | Where-Object { $_.Name -ne "nsis.exe" }
            if ($INSTALLER_FILES) {
              $INSTALLER_PATH = $INSTALLER_FILES[0].FullName
              Write-Host "Found installer at: $INSTALLER_PATH"
              
              $NEW_NAME = "raux-$env:BRANCH_NAME-$env:VERSION-$env:COMMIT_ID-setup.exe"
              $DESTINATION = "installer/$NEW_NAME"
              Move-Item -Path $INSTALLER_PATH -Destination $DESTINATION -Force
              echo "INSTALLER_NAME=$NEW_NAME" >> $env:GITHUB_ENV
              Write-Host "Renamed installer to: $NEW_NAME"
            } else {
              Write-Host "ERROR: No installer .exe files found in installer directory!"
              exit 1
            }
          } else {
            Write-Host "ERROR: Installer directory not found!"
            exit 1
          }

      - name: Create checksums
        if: success()
        run: |
          $INSTALLER_PATH = "installer/$env:INSTALLER_NAME"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "installer/$env:INSTALLER_NAME.sha256" -Encoding ascii
          Write-Host "Created checksum file with value: $CHECKSUM"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer/${{ env.INSTALLER_NAME }}
            installer/${{ env.INSTALLER_NAME }}.sha256
          name: ${{ env.BRANCH_NAME }}-${{ env.version }}-${{ env.COMMIT_ID }}
          prerelease: true
          generate_release_notes: true
          body: |
            Branch build for ${{ env.BRANCH_NAME }}
            Commit: ${{ env.COMMIT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Keep artifact upload as backup and for CI system visibility
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ env.BRANCH_NAME }}
          path: |
            installer/${{ env.INSTALLER_NAME }}
            installer/${{ env.INSTALLER_NAME }}.sha256
          retention-days: 5  # Keep branch builds for 5 days 