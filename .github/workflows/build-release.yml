name: Build and package solution

# This workflow handles two main jobs:
# 1. build-and-package: Builds the Python wheel on Ubuntu
# 2. publish-installer: Creates and publishes Windows installer packages
#
# Note: The publish-installer job is skipped for pull requests and only runs on main branch pushes

on:
  push:
  pull_request:
    branches:
      - main
  workflow_dispatch:

      
jobs:
  build-and-package:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/setup-python@v5
        with:
          python-version: 3.10.16

      - name: Build wheel
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build .

  publish-installer:
    needs: build-and-package
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract branch name and commit ID
        run: |
          # Extract branch name, replacing / with - for valid filename
          $BRANCH_NAME = if ($env:GITHUB_HEAD_REF) { $env:GITHUB_HEAD_REF } else { $env:GITHUB_REF -replace '^refs/heads/' }
          $BRANCH_NAME = $BRANCH_NAME -replace '/', '-'
          echo "BRANCH_NAME=$BRANCH_NAME" >> $env:GITHUB_ENV
          
          # Get short commit ID (first 7 characters)
          $COMMIT_ID = git rev-parse --short=7 HEAD
          echo "COMMIT_ID=$COMMIT_ID" >> $env:GITHUB_ENV
          
          Write-Host "Branch name: $BRANCH_NAME"
          Write-Host "Commit ID: $COMMIT_ID"

      - name: Get version number from package.json
        id: get_version
        run: |
          $VERSION = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$VERSION" >> $env:GITHUB_ENV
          Write-Host "Version: $VERSION"

      - name: Extract latest CHANGELOG entry
        id: changelog
        run: |
          $content = Get-Content CHANGELOG.md -Raw
          if ($content -match '(?s)^## \[(.*?)\n## \[') {
              $CHANGELOG_CONTENT = $matches[1].Trim()
          } else {
              $CHANGELOG_CONTENT = ""
          }
          $CHANGELOG_ESCAPED = $CHANGELOG_CONTENT -replace "`n", "%0A"
          Write-Host "Extracted latest release notes from CHANGELOG.md:"
          Write-Host $CHANGELOG_CONTENT
          echo "content=$CHANGELOG_ESCAPED" >> $env:GITHUB_ENV

      - name: Create GitHub release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changelog = `${{ env.content }}`;
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ env.version }}`,
              name: `v${{ env.version }}`,
              body: changelog,
            })
            console.log(`Created release ${release.data.html_url}`)
            return release.data.id;

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate version.txt
        run: |
          python installer/version.py
          if (Test-Path -Path "version.txt") {
            Write-Host "version.txt generated successfully"
            Get-Content -Path "version.txt"
          } else {
            Write-Host "ERROR: version.txt was not generated!"
            exit 1
          }

      - name: Install NSIS
        run: |
          # Download NSIS installer
          Invoke-WebRequest -UserAgent "Wget" -Uri "https://sourceforge.net/projects/nsis/files/NSIS%203/3.10/nsis-3.10-setup.exe" -OutFile "nsis.exe"
          
          # Install NSIS
          Start-Process nsis.exe -ArgumentList '/S' -Wait
          
          # Add NSIS to PATH
          echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH

      - name: Build installer
        run: |
          echo "Building installer with NSIS..."
          # Use the full path to the script
          $SCRIPT_PATH = "$(Get-Location)\installer\Installer-UX.nsi"
          Write-Host "Using NSIS script at: $SCRIPT_PATH"
          
          if (Test-Path -Path $SCRIPT_PATH) {
            makensis $SCRIPT_PATH
          } else {
            Write-Host "ERROR: NSIS script not found at $SCRIPT_PATH"
            exit 1
          }

      - name: Rename installer
        if: success()
        run: |
          if (Test-Path -Path "installer") {
            $INSTALLER_FILES = Get-ChildItem -Path "installer" -Filter "*.exe" | Where-Object { $_.Name -ne "nsis.exe" }
            if ($INSTALLER_FILES) {
              $INSTALLER_PATH = $INSTALLER_FILES[0].FullName
              Write-Host "Found installer at: $INSTALLER_PATH"
              $NEW_NAME = "raux-$env:VERSION-setup.exe"
              $DESTINATION = "installer/$NEW_NAME"
              Move-Item -Path $INSTALLER_PATH -Destination $DESTINATION -Force
              echo "INSTALLER_NAME=$NEW_NAME" >> $env:GITHUB_ENV
            } else {
              Write-Host "ERROR: No installer .exe files found in installer directory!"
              exit 1
            }
          } else {
            Write-Host "ERROR: Installer directory not found!"
            exit 1
          }

      - name: Create checksums
        if: success()
        run: |
          # Create SHA256 checksum file
          $INSTALLER_PATH = "installer/$env:INSTALLER_NAME"
          $CHECKSUM = (Get-FileHash -Path $INSTALLER_PATH -Algorithm SHA256).Hash.ToLower()
          $CHECKSUM | Out-File -FilePath "installer/$env:INSTALLER_NAME.sha256" -Encoding ascii
          Write-Host "Created checksum file with value: $CHECKSUM"

      - name: Upload installer to GitHub release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer/${{ env.INSTALLER_NAME }}
            installer/${{ env.INSTALLER_NAME }}.sha256
          tag_name: v${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}