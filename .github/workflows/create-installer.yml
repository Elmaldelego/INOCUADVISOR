name: Create installer

on:
  workflow_run:
    workflows: ["Build and package solution"]
    types:
      - completed
  workflow_dispatch:

jobs:
  run:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version number from package.json
      id: get_version
      run: |
        $VERSION = (Get-Content package.json | ConvertFrom-Json).version
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV
        Write-Host "Version from package.json: $VERSION"

    - name: Create dist directory
      run: mkdir -p dist

    - name: Get latest release and download wheel
      run: |
        $REPO = "${{ github.repository }}"
        
        # Get the latest release
        Write-Host "Getting latest release..."
        $LATEST_RELEASE = Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/releases/latest" -Headers @{
          "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
          "Accept" = "application/vnd.github.v3+json"
        }
        
        Write-Host "Latest release: $($LATEST_RELEASE.tag_name) - $($LATEST_RELEASE.name)"
        Write-Host "Assets count: $($LATEST_RELEASE.assets.Count)"
        
        # Store release info for later steps
        echo "RELEASE_TAG=$($LATEST_RELEASE.tag_name)" >> $env:GITHUB_ENV
        echo "RELEASE_VERSION=$($LATEST_RELEASE.tag_name.TrimStart('v'))" >> $env:GITHUB_ENV
        
        # Find the wheel asset
        $WHEEL_ASSET = $LATEST_RELEASE.assets | Where-Object { $_.name -like "*.whl" } | Select-Object -First 1
        
        if ($WHEEL_ASSET) {
          Write-Host "Found wheel asset: $($WHEEL_ASSET.name) (ID: $($WHEEL_ASSET.id))"
          Write-Host "Download URL: $($WHEEL_ASSET.browser_download_url)"
          
          # Download the wheel file
          Invoke-WebRequest -Uri $WHEEL_ASSET.browser_download_url -OutFile "dist/$($WHEEL_ASSET.name)"
          echo "WHEEL_FILENAME=$($WHEEL_ASSET.name)" >> $env:GITHUB_ENV
        } else {
          Write-Host "Error: Could not find any wheel file in the latest release"
          Write-Host "Available assets:"
          $LATEST_RELEASE.assets | ForEach-Object { Write-Host "- $($_.name)" }
          exit 1
        }

    - name: Install NSIS
      run: |
        # Download NSIS installer
        Invoke-WebRequest -UserAgent "Wget" -Uri "https://sourceforge.net/projects/nsis/files/NSIS%203/3.10/nsis-3.10-setup.exe" -OutFile "nsis.exe"
        
        # Install NSIS
        Start-Process nsis.exe -ArgumentList '/S' -Wait

    - name: Build installer
      run: |
        echo "Building installer with NSIS..."
        makensis installer/Installer-UX.nsi

    - name: Rename installer
      run: |
        $INSTALLER_PATH = Get-ChildItem -Path "installer" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
        $NEW_NAME = "open-webui-$env:RELEASE_VERSION-setup.exe"
        Move-Item -Path $INSTALLER_PATH -Destination "installer/$NEW_NAME"
        echo "INSTALLER_NAME=$NEW_NAME" >> $env:GITHUB_ENV

    - name: Upload installer to GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: installer/${{ env.INSTALLER_NAME }}
        tag_name: ${{ env.RELEASE_TAG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
