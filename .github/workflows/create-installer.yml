name: Create installer

on:
  workflow_run:
    workflows: ["Build and package solution"]
    types:
      - completed
  workflow_dispatch:

jobs:
  run:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download wheel artifact
      uses: actions/download-artifact@v4
      with:
        name: python-wheel
        path: dist
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Get version number from package.json
      id: get_version
      run: |
        $VERSION = (Get-Content package.json | ConvertFrom-Json).version
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV

    - name: Download NSIS 3.11
      run: |
        Invoke-WebRequest -Uri "https://sourceforge.net/projects/nsis/files/NSIS%203/3.11/nsis-3.11-setup.exe/download" -OutFile "nsis-setup.exe"
        Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait
        echo "Adding NSIS to PATH"
        echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH

    - name: Build installer
      run: |
        echo "Building installer with NSIS..."
        makensis installer/Installer-UX.nsi

    - name: Rename installer
      run: |
        $INSTALLER_PATH = Get-ChildItem -Path "installer" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
        $NEW_NAME = "open-webui-$env:VERSION-setup.exe"
        Move-Item -Path $INSTALLER_PATH -Destination "installer/$NEW_NAME"
        echo "INSTALLER_NAME=$NEW_NAME" >> $env:GITHUB_ENV

    - name: Get latest release
      id: get_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 1
          });
          if (releases.data.length === 0) {
            throw new Error('No releases found');
          }
          const releaseId = releases.data[0].id;
          const releaseTag = releases.data[0].tag_name;
          core.setOutput('release_id', releaseId);
          core.setOutput('release_tag', releaseTag);

    - name: Upload installer to GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: installer/${{ env.INSTALLER_NAME }}
        tag_name: ${{ steps.get_release.outputs.release_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 